using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;
using UnityEngine.Rendering.RenderGraphModule;

#ROOTNAMESPACEBEGIN#
    public class #SCRIPTNAME# : ScriptableRendererFeature
    {
        class #SCRIPTNAME#Pass : ScriptableRenderPass
        {
            // This class stores the data needed by the RenderGraph pass.
            // It is passed as a parameter to the delegate function that executes the RenderGraph pass.
            private class PassData
            {
            }
            #NOTRIM#
            // This static method is passed as the RenderFunc delegate to the RenderGraph render pass.
            // It is used to execute draw commands.
            static void ExecutePass(PassData data, RasterGraphContext context)
            {
            }
            #NOTRIM#
            // RecordRenderGraph is where the RenderGraph handle can be accessed, through which render passes can be added to the graph.
            // FrameData is a context container through which URP resources can be accessed and managed.
            public override void RecordRenderGraph(RenderGraph renderGraph, ContextContainer frameData)
            {
                const string PassName = "#SCRIPTNAME# Pass";        
            }
        }
        #NOTRIM#
        #SCRIPTNAME#Pass _#SCRIPTNAME#Pass;
        #NOTRIM#
        /// <inheritdoc/>
        public override void Create()
        {
            _#SCRIPTNAME#Pass = new #SCRIPTNAME#Pass();
            #NOTRIM#
            // Configures where the render pass should be injected.
            _#SCRIPTNAME#Pass.renderPassEvent = RenderPassEvent.AfterRenderingOpaques;
        }

        // Here you can inject one or multiple render passes in the renderer.
        // This method is called when setting up the renderer once per-camera.
        public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
        {
            renderer.EnqueuePass(_#SCRIPTNAME#Pass);
        }
    }
#ROOTNAMESPACEEND#